import React, { useState, useEffect } from "react";
import { Download, Copy, Check, AlertTriangle } from "lucide-react";
import { useWizard } from "../../hooks/useWizard";
import { validateConfiguration } from "../../utils/fieldValidations";
import ConfigurationSummary from "../common/ConfigurationSummary";

function ReviewStep() {
  const { state } = useWizard();
  const { configuration } = state;
  const [copySuccess, setCopySuccess] = useState(false);
  const [validationErrors, setValidationErrors] = useState({});
  const [activeTab, setActiveTab] = useState("env");

  useEffect(() => {
    // Validate entire configuration
    const errors = validateConfiguration(configuration);
    setValidationErrors(errors);
  }, [configuration]);

  const hasErrors = Object.keys(validationErrors).length > 0;

  const generateEnvFile = () => {
    const env = `# istSOS4 Configuration File
# Generated by istSOS4 Configuration Wizard
# Generated on: ${new Date().toISOString()}

# Basic Server Configuration
HOSTNAME=${configuration.hostname}:${configuration.externalPort}
EXTERNAL_PORT=${configuration.externalPort}
SUBPATH=${configuration.subpath}
VERSION=${configuration.version}
DEBUG=${configuration.debug}

# Database Configuration
POSTGRES_DB=${configuration.postgresDb}
POSTGRES_USER=${configuration.postgresUser}
POSTGRES_HOST=${configuration.postgresHost}
POSTGRES_EXTERNAL_PORT=${configuration.postgresExternalPort}
POSTGRES_PASSWORD=${configuration.postgresPassword}
PG_MAX_OVERFLOW=${configuration.pgMaxOverflow}
PG_POOL_SIZE=${configuration.pgPoolSize}
PG_POOL_TIMEOUT=${configuration.pgPoolTimeout}

# Authentication Configuration
ISTSOS_ADMIN=${configuration.istsosAdmin}
ISTSOS_ADMIN_PASSWORD=${configuration.istsosAdminPassword}
AUTHORIZATION=${configuration.authorization}
SECRET_KEY=${configuration.secretKey}
ALGORITHM=${configuration.algorithm}
ACCESS_TOKEN_EXPIRE_MINUTES=${configuration.accessTokenExpireMinutes}
ANONYMOUS_VIEWER=${configuration.anonymousViewer}

# Data Management
VERSIONING=${configuration.versioning}
DUPLICATES=${configuration.duplicates}

# Simple Data Configuration
DUMMY_DATA=${configuration.dummyData}
CLEAR_DATA=${configuration.clearData}
N_THINGS=${configuration.nThings}
N_OBSERVED_PROPERTIES=${configuration.nObservedProperties}
INTERVAL=${configuration.interval}
FREQUENCY=${configuration.frequency}
START_DATETIME=${
      configuration.baseDatetime +
      "." +
      "000" +
      (configuration.timezoneOffset || "+01:00")
    }
PARTITION_CHUNK=${configuration.partitionChunk}
CHUNK_INTERVAL=${configuration.chunkInterval}

# Performance Settings
REDIS=${configuration.redis}
COUNT_MODE=${configuration.countMode}
COUNT_ESTIMATE_THRESHOLD=${configuration.countEstimateThreshold}
TOP_VALUE=${configuration.topValue}

# Coordinate System
EPSG=${configuration.epsg}
    
`;

    return env;
  };

  const downloadEnvFile = () => {
    const envContent = generateEnvFile();
    const blob = new Blob([envContent], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "istsos4.env";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadDockerCompose = () => {
    const dockerComposeContent = generateDockerComposeFile();
    const blob = new Blob([dockerComposeContent], {
      type: "text/yaml;charset=utf-8",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "docker-compose.yml";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateDockerComposeFile = () => {
    return `services:
  database:
    image: ghcr.io/istsos/istsos4/database:1.4
    environment:
      POSTGRES_DB: \${POSTGRES_DB}
      POSTGRES_USER: \${POSTGRES_USER}
      POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
      DATADIR: /var/lib/postgresql/data
    command: >
      postgres
        -c custom.versioning=\${VERSIONING:-0}
        -c custom.authorization=\${AUTHORIZATION:-0}
        -c custom.duplicates=\${DUPLICATES:-0}
        -c custom.epsg=\${EPSG:-4326}
        -c custom.user=\${ISTSOS_ADMIN:-admin}
        -c custom.password=\${ISTSOS_ADMIN_PASSWORD:-admin}
        -c log_statement="all"
        -c log_destination="stderr"
        -c log_duration="on"
    ports:
      - "\${POSTGRES_EXTERNAL_PORT}:5432"
    healthcheck:
      test: pg_isready -U \${POSTGRES_USER} -d \${POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    image: ghcr.io/istsos/istsos4/api:1.9
    environment:
      HOSTNAME: \${HOSTNAME}
      SUBPATH: \${SUBPATH}
      VERSION: \${VERSION}
      DEBUG: \${DEBUG}
      VERSIONING: \${VERSIONING}
      POSTGRES_DB: \${POSTGRES_DB}
      ISTSOS_ADMIN: \${ISTSOS_ADMIN}
      ISTSOS_ADMIN_PASSWORD: \${ISTSOS_ADMIN_PASSWORD}
      POSTGRES_HOST: \${POSTGRES_HOST}
      PG_MAX_OVERFLOW: \${PG_MAX_OVERFLOW}
      PG_POOL_SIZE: \${PG_POOL_SIZE}
      PG_POOL_TIMEOUT: \${PG_POOL_TIMEOUT}
      COUNT_MODE: \${COUNT_MODE}
      COUNT_ESTIMATE_THRESHOLD: \${COUNT_ESTIMATE_THRESHOLD}
      TOP_VALUE: \${TOP_VALUE}
      PARTITION_CHUNK: \${PARTITION_CHUNK}
      REDIS: \${REDIS}
      EPSG: \${EPSG}
      AUTHORIZATION: \${AUTHORIZATION}
      SECRET_KEY: \${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: \${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: \${ALGORITHM}
      ANONYMOUS_VIEWER: \${ANONYMOUS_VIEWER}
    command: uvicorn --timeout-keep-alive 75 --workers 2 --host 0.0.0.0 --port 5000 app.main:app
    ports:
      - \${EXTERNAL_PORT}:5000
    working_dir: /code

  redis:
    image: redis:7.4.0-alpine3.20
    restart: always

  dummy_data:
    image: ghcr.io/istsos/istsos4/dummy_data:1.5
    command: python3 generator.py
    working_dir: /dummy_data
    environment:
      HOSTNAME: \${HOSTNAME}
      SUBPATH: \${SUBPATH}
      VERSION: \${VERSION}
      VERSIONING: \${VERSIONING}
      POSTGRES_DB: \${POSTGRES_DB}
      ISTSOS_ADMIN: \${ISTSOS_ADMIN}
      ISTSOS_ADMIN_PASSWORD: \${ISTSOS_ADMIN_PASSWORD}
      POSTGRES_HOST: \${POSTGRES_HOST}
      DUMMY_DATA: \${DUMMY_DATA}
      CLEAR_DATA: \${CLEAR_DATA}
      N_THINGS: \${N_THINGS}
      N_OBSERVED_PROPERTIES: \${N_OBSERVED_PROPERTIES}
      INTERVAL: \${INTERVAL}
      FREQUENCY: \${FREQUENCY}
      START_DATETIME: \${START_DATETIME}
      CHUNK_INTERVAL: \${CHUNK_INTERVAL}
      EPSG: \${EPSG}
      AUTHORIZATION: \${AUTHORIZATION}
`;
  };

  const copyDockerComposeToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateDockerComposeFile());
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  };

  const copyGitCommands = async () => {
    try {
      await navigator.clipboard.writeText(
        "git clone https://github.com/istSOS/istsos4.git\ncd istsos4"
      );
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateEnvFile());
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  };

  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-2xl font-bold text-gray-900">
          Configuration Review
        </h2>
        <p className="text-gray-600 mt-2">
          Review your configuration and download the necessary files to deploy
          your istSOS4 instance.
        </p>
      </div>

      {hasErrors && (
        <div className="bg-red-50 border border-red-200 rounded-xl p-6 shadow-sm">
          <div className="flex items-start">
            <AlertTriangle className="w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0" />
            <div>
              <h3 className="text-lg font-semibold text-red-900 mb-2">
                Validation Errors Found
              </h3>
              <p className="text-red-800 text-sm mb-3">
                Please fix the following errors before generating the
                configuration:
              </p>
              <ul className="text-sm text-red-700 space-y-1">
                {Object.entries(validationErrors).map(([field, error]) => (
                  <li key={field}>
                    â€¢ <strong>{field}:</strong> {error}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      <ConfigurationSummary />

      {/* Configuration Files Preview Card */}
      <div className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900 mb-6">
          Generated Configuration Files
        </h3>

        <div className="flex border-b border-gray-300 mb-6">
          <button
            onClick={() => setActiveTab("env")}
            className={`px-4 py-2 text-sm font-medium transition-colors rounded-t-lg ${
              activeTab === "env"
                ? "border-b-2 border-blue-500 text-blue-600 bg-blue-50"
                : "text-gray-600 hover:text-gray-800 hover:bg-gray-50"
            }`}
          >
            .env File
          </button>
          <button
            onClick={() => setActiveTab("docker")}
            className={`px-4 py-2 text-sm font-medium transition-colors rounded-t-lg ${
              activeTab === "docker"
                ? "border-b-2 border-blue-500 text-blue-600 bg-blue-50"
                : "text-gray-600 hover:text-gray-800 hover:bg-gray-50"
            }`}
          >
            docker-compose.yml
          </button>
        </div>

        <div className="bg-gray-50 rounded-lg border border-gray-300 overflow-hidden">
          <div className="bg-gray-100 px-4 py-3 border-b border-gray-300 flex justify-between items-center">
            <span className="text-sm font-medium text-gray-700">
              {activeTab === "env" ? "istsos4.env" : "docker-compose.yml"}
            </span>
            <div className="flex space-x-2">
              <button
                onClick={
                  activeTab === "env"
                    ? copyToClipboard
                    : copyDockerComposeToClipboard
                }
                className="text-gray-600 hover:text-gray-800 p-1 rounded transition-colors"
                title="Copy to clipboard"
              >
                {copySuccess ? (
                  <Check className="w-4 h-4 text-green-600" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </button>
            </div>
          </div>
          <pre className="p-4 text-sm overflow-x-auto max-h-96 bg-white">
            <code className="text-gray-800">
              {activeTab === "env"
                ? generateEnvFile()
                : generateDockerComposeFile()}
            </code>
          </pre>
        </div>
      </div>

      {/* Download Actions Card */}
      <div className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          Download Configuration Files
        </h3>

        {/* Important Note */}
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 mb-4">
          <div className="flex items-start">
            <span className="text-amber-600 text-lg mr-2">*</span>
            <div>
              <h4 className="text-sm font-medium text-amber-900 mb-1">
                Important Note
              </h4>
              <p className="text-sm text-amber-800">
                The downloaded file will be named <strong>istsos4.env</strong>.
                Please rename it to <strong>.env</strong> after downloading, or
                copy the content and paste it into your existing <strong>.env</strong> file.
              </p>
            </div>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-4">
          <button
            onClick={downloadEnvFile}
            disabled={hasErrors}
            className={`flex items-center justify-center px-6 py-3 rounded-lg transition-colors ${
              hasErrors
                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                : "bg-blue-600 text-white hover:bg-blue-700 shadow-sm"
            }`}
          >
            <Download className="w-5 h-5 mr-2" />
            Download .env file
          </button>

          <button
            onClick={downloadDockerCompose}
            disabled={hasErrors}
            className={`flex items-center justify-center px-6 py-3 rounded-lg transition-colors ${
              hasErrors
                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                : "bg-green-600 text-white hover:bg-green-700 shadow-sm"
            }`}
          >
            <Download className="w-5 h-5 mr-2" />
            Download docker-compose.yml file
          </button>
        </div>
      </div>

      {/* Next Steps Card */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
        <h3 className="text-lg font-semibold text-blue-900 mb-4">Next Steps</h3>
        <ol className="text-sm text-blue-800 space-y-3 list-decimal list-inside">
          <li>
            Clone the istSOS4 repository to get started:
            <div className="mt-2 bg-blue-100 p-3 rounded font-mono text-blue-900 text-xs relative">
              <div className="absolute top-2 right-2">
                <button
                  onClick={copyGitCommands}
                  className="text-blue-700 hover:text-blue-900 p-1 rounded transition-colors bg-blue-200 hover:bg-blue-300"
                  title="Copy commands"
                >
                  {copySuccess ? (
                    <Check className="w-3 h-3 text-green-700" />
                  ) : (
                    <Copy className="w-3 h-3" />
                  )}
                </button>
              </div>
              git clone https://github.com/istSOS/istsos4.git
              <br />
              cd istsos4
            </div>
          </li>
          <li>
            Replace existing{" "}
            <code className="bg-blue-100 px-2 py-1 rounded font-mono text-blue-900">
              .env
            </code>{" "}
            and{" "}
            <code className="bg-blue-100 px-2 py-1 rounded font-mono text-blue-900">
              docker-compose.yml
            </code>{" "}
            files with the newly generated files in your project directory.
          </li>
          <li>
            Ensure Docker and Docker Compose are installed on your system.
          </li>
          <li>
            Run{" "}
            <code className="bg-blue-100 px-2 py-1 rounded font-mono text-blue-900">
              docker-compose up -d
            </code>{" "}
            to start all services in detached mode.
          </li>
          <li>
            Access istSOS4 API documentation at{" "}
            <a
              href={`${configuration.hostname}:${configuration.externalPort}${configuration.subpath}${configuration.version}/docs`}
              className="underline hover:text-blue-900 transition-colors"
              target="_blank"
              rel="noopener noreferrer"
            >
              {`${configuration.hostname}:${configuration.externalPort}${configuration.subpath}${configuration.version}/docs`}
            </a>
          </li>
          <li>
            Track application logs and troubleshoot issues using{" "}
            <code className="bg-blue-100 px-2 py-1 rounded font-mono text-blue-900">
              docker-compose logs -f
            </code>
          </li>
        </ol>
      </div>
    </div>
  );
}

export default ReviewStep;
